diff --git a/src/file/dirs_win32.c b/src/file/dirs_win32.c
index 9f77a2e..aafbdab 100644
--- a/src/file/dirs_win32.c
+++ b/src/file/dirs_win32.c
@@ -21,6 +21,15 @@
 # include "config.h"
 #endif
 
+#include <winapifamily.h>
+#if defined(WINAPI_FAMILY_PARTITION) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+#define COBJMACROS
+#define INITGUID
+#include <winstring.h>
+#include <windows.storage.h>
+#include <roapi.h>
+#endif
+
 #include "dirs.h"
 
 #include "util/logging.h"
@@ -33,6 +42,137 @@
 #include <limits.h>
 
 
+#if defined(WINAPI_FAMILY_PARTITION) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+DEFINE_GUID(IID_IStorageItem, 0x4207a996, 0xca2f, 0x42f7, 0xbd, 0xe8, 0x8b, 0x10, 0x45, 0x7a, 0x7f, 0x30);
+DEFINE_GUID(IID_IApplicationDataStatics, 0x5612147b, 0xe843, 0x45e3, 0x94, 0xd8, 0x06, 0x16, 0x9e, 0x3c, 0x8e, 0x17);
+DEFINE_GUID(IID_IKnownFoldersStatics, 0x5a2a7520, 0x4802, 0x452d, 0x9a, 0xd9, 0x43, 0x51, 0xad, 0xa7, 0xec, 0x35);
+
+typedef __x_ABI_CWindows_CStorage_CIStorageFolder           IStorageFolder;
+typedef __x_ABI_CWindows_CStorage_CIApplicationDataStatics  IApplicationDataStatics;
+typedef __x_ABI_CWindows_CStorage_CIApplicationData         IApplicationData;
+typedef __x_ABI_CWindows_CStorage_CIApplicationData3        IApplicationData3;
+typedef __x_ABI_CWindows_CStorage_CIKnownFoldersStatics     IKnownFoldersStatics;
+typedef __x_ABI_CWindows_CStorage_CIStorageItem             IStorageItem;
+
+#define IApplicationDataStatics_get_Current         __x_ABI_CWindows_CStorage_CIApplicationDataStatics_get_Current
+#define IApplicationData_get_RoamingFolder          __x_ABI_CWindows_CStorage_CIApplicationData_get_RoamingFolder
+#define IApplicationData_get_LocalFolder            __x_ABI_CWindows_CStorage_CIApplicationData_get_LocalFolder
+#define IApplicationData3_get_SharedLocalFolder     __x_ABI_CWindows_CStorage_CIApplicationData3_get_SharedLocalFolder
+#define IStorageItem_get_Path                       __x_ABI_CWindows_CStorage_CIStorageItem_get_Path
+#define IStorageItem_Release                        __x_ABI_CWindows_CStorage_CIStorageItem_Release
+#define IStorageFolder_QueryInterface               __x_ABI_CWindows_CStorage_CIStorageFolder_QueryInterface
+#define IStorageFolder_Release                      __x_ABI_CWindows_CStorage_CIStorageFolder_Release
+#define IApplicationDataStatics_Release             __x_ABI_CWindows_CStorage_CIApplicationDataStatics_Release
+#define IKnownFoldersStatics_Release                __x_ABI_CWindows_CStorage_CIKnownFoldersStatics_Release
+#define IApplicationData_Release                    __x_ABI_CWindows_CStorage_CIApplicationData_Release
+
+typedef enum
+{
+    SHGFP_TYPE_CURRENT = 0,
+    SHGFP_TYPE_DEFAULT = 1,
+} SHGFP_TYPE;
+
+#ifndef CSIDL_FLAG_CREATE
+#   define CSIDL_FLAG_CREATE               0x8000
+#endif
+#ifndef CSIDL_APPDATA
+#   define CSIDL_APPDATA                   0x001a
+#endif
+#ifndef CSIDL_LOCAL_APPDATA
+#   define CSIDL_LOCAL_APPDATA             0x001c
+#endif
+#ifndef CSIDL_COMMON_APPDATA
+#   define CSIDL_COMMON_APPDATA            0x0023
+#endif
+
+static HRESULT winRTSHGetFolderPathW(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPWSTR pszPath)
+{
+    HRESULT hr = E_FAIL;
+    IStorageFolder *folder;
+
+    if (dwFlags != SHGFP_TYPE_CURRENT)
+        return E_NOTIMPL;
+
+    folder = NULL;
+    csidl &= ~0xFF00; /* CSIDL_FLAG_MASK */
+
+    // Only supports CSIDL_APPDATA, CSIDL_LOCAL_APPDATA, CSIDL_COMMON_APPDATA
+    IApplicationDataStatics *appDataStatics = NULL;
+    IApplicationData *appData = NULL;
+    IApplicationData3 *appData3 = NULL;
+    static const WCHAR *className = L"Windows.Storage.ApplicationData";
+    const UINT32 clen = wcslen(className);
+
+    HSTRING hClassName = NULL;
+    HSTRING_HEADER header;
+    hr = WindowsCreateStringReference(className, clen, &header, &hClassName);
+    if (FAILED(hr))
+        goto end_appdata;
+
+    hr = RoGetActivationFactory(hClassName, &IID_IApplicationDataStatics, (void**)&appDataStatics);
+
+    if (FAILED(hr))
+        goto end_appdata;
+
+    if (!appDataStatics) {
+        goto end_appdata;
+    }
+
+    hr = IApplicationDataStatics_get_Current(appDataStatics, &appData);
+
+    if (FAILED(hr))
+        goto end_appdata;
+
+    if (!appData)
+        goto end_appdata;
+
+    switch (csidl) {
+        case CSIDL_APPDATA:
+            hr = IApplicationData_get_RoamingFolder(appData, &folder);
+            break;
+        case CSIDL_LOCAL_APPDATA:
+            hr = IApplicationData_get_LocalFolder(appData, &folder);
+            break;
+        case CSIDL_COMMON_APPDATA:
+            //Enable the policy e.g.by creating a REG_DWORD value called AllowSharedLocalAppData under 
+            //   HKLM\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\AppModel\StateManager and set it to 1.
+            hr = IApplicationData3_get_SharedLocalFolder((IApplicationData3*)appData, &folder);
+            break;
+        default:
+            hr = E_NOTIMPL;
+    }
+
+end_appdata:
+    WindowsDeleteString(hClassName);
+    if (appDataStatics)
+        IApplicationDataStatics_Release(appDataStatics);
+    if (appData)
+        IApplicationData_Release(appData);
+
+    if (SUCCEEDED(hr) && (folder != NULL)) {
+        PCWSTR pszPathTemp;
+        IStorageItem *item = NULL;
+        HSTRING path = NULL;
+        hr = IStorageFolder_QueryInterface(folder, &IID_IStorageItem, (void**)&item);
+        if (FAILED(hr))
+            goto end_folder;
+        hr = IStorageItem_get_Path(item, &path);
+        if (FAILED(hr))
+            goto end_folder;
+        pszPathTemp = WindowsGetStringRawBuffer(path, NULL);
+        wcscpy(pszPath, pszPathTemp);
+end_folder:
+        WindowsDeleteString(path);
+        IStorageFolder_Release(folder);
+        if (item)
+            IStorageItem_Release(item);
+    }
+
+    return hr;
+}
+#define SHGetFolderPathW winRTSHGetFolderPathW
+#endif
+
 char *file_get_config_home(void)
 {
     return file_get_data_home();
diff --git a/src/file/keydb.h b/src/file/keydb.h
index c2d013f..07eaa0d 100644
--- a/src/file/keydb.h
+++ b/src/file/keydb.h
@@ -1,20 +1,11 @@
 
 /* encrypted keys */
 
-static const uint8_t internal_dk_list[][23] = {
-  {
-  },
-};
+static const uint8_t internal_dk_list[][23] = {0};
 
-static const uint8_t internal_pk_list[][16] = {
-  {
-  },
-};
+static const uint8_t internal_pk_list[][16] = {0};
 
-static const uint8_t internal_hc_list[][112] = {
-  {
-  },
-};
+static const uint8_t internal_hc_list[][112] = {0};
 
 /* customize this function to "hide" the keys in the binary */
 
diff --git a/src/file/mmc_device_win32.c b/src/file/mmc_device_win32.c
index f78dd1c..0319ddd 100644
--- a/src/file/mmc_device_win32.c
+++ b/src/file/mmc_device_win32.c
@@ -34,6 +34,18 @@
 #include <stdlib.h>
 #include <string.h>
 
+#if defined(WINAPI_FAMILY_PARTITION) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+static HANDLE winRTCreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
+{
+    WCHAR wlpFileName[MAX_PATH];
+    if (MultiByteToWideChar(CP_UTF8, 0, lpFileName, -1, wlpFileName, MAX_PATH) == 0) {
+        return NULL;
+    }
+    return CreateFileFromAppW(wlpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
+}
+
+#define CreateFileA winRTCreateFileA
+#endif
 
 /*
  * from ntddscsi.h, Windows DDK
@@ -139,17 +151,17 @@ MMCDEV *device_open(const char *path)
 
     BD_DEBUG(DBG_MMC, "Opening Windows MMC drive %s...\n", drive);
 
-    type = GetDriveType(drive);
+    type = GetDriveTypeA(drive);
     if (type != DRIVE_CDROM) {
         BD_DEBUG(DBG_MMC | DBG_CRIT, "Drive %s is not CD/DVD drive\n", drive);
         return NULL;
     }
 
-    fd = CreateFile(volume, GENERIC_READ | GENERIC_WRITE,
+    fd = CreateFileA(volume, GENERIC_READ | GENERIC_WRITE,
                     FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
                     OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
     if (fd == INVALID_HANDLE_VALUE) {
-        fd = CreateFile(volume, GENERIC_READ,
+        fd = CreateFileA(volume, GENERIC_READ,
                         FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
                         OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
         if (fd == INVALID_HANDLE_VALUE) {
diff --git a/src/libaacs/crypto.c b/src/libaacs/crypto.c
index ec3f6b2..4c10a0d 100644
--- a/src/libaacs/crypto.c
+++ b/src/libaacs/crypto.c
@@ -484,22 +484,26 @@ static gcry_error_t _aacs_sexp_hash(gcry_sexp_t *p_sexp_data,
     }
 
     /* Build an s-expression for the hash */
-    GCRY_VERIFY("gcry_sexp_build",
-                gcry_sexp_build(p_sexp_data, NULL,
-                                "(data"
 #if defined(GCRYPT_VERSION_NUMBER) && GCRYPT_VERSION_NUMBER >= 0x010600
                                 /*
                                  * For some reason gcrypt 1.6.0
                                  * requires 'param' flag here and not
                                  * in key, probably a bug.
                                  */
-                                "  (flags raw param)"
+    GCRY_VERIFY( "gcry_sexp_build",
+        gcry_sexp_build( p_sexp_data, NULL,
+        "(data""  (flags raw param)"
+        "  (value %m))",
+        mpi_md
+        ));
 #else
-                                "  (flags raw)"
+    GCRY_VERIFY( "gcry_sexp_build",
+        gcry_sexp_build( p_sexp_data, NULL,
+        "(data""  (flags raw)"
+        "  (value %m))",
+        mpi_md
+        ) );
 #endif
-                                "  (value %m))",
-                                mpi_md
-                                ));
 
     /* Dump information about the data s-expression when debugging */
     if (GCRYPT_DEBUG) {
